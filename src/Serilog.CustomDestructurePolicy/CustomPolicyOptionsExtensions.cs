using System;
using System.Linq;
using System.Runtime.CompilerServices;
using Serilog.CustomDestructurePolicy;

// ReSharper disable once CheckNamespace
namespace Serilog
{
    /// <summary>
    /// Extensions for building custom policy
    /// </summary>
    public static class CustomPolicyOptionsExtensions
    {
        /// <summary>
        /// Masking certain properties with certain mask
        /// </summary>
        /// <param name="policy"></param>
        /// <param name="masking">Replacement word</param>
        /// <param name="propertyNames">Property names to be masked</param>
        /// <returns></returns>
        public static CustomPolicyOptions Masking(this CustomPolicyOptions policy, string masking,
            string[] propertyNames)
        {
            if (string.IsNullOrWhiteSpace(masking)) throw new ArgumentException(nameof(masking));
            if (propertyNames.Length == 0)
                throw new ArgumentException("Please specify at least 1 property to mask", nameof(propertyNames));
            return policy.AddPolicy("masking", (p, _) => propertyNames.Contains(p.Name), _ => masking);
        }

        /// <summary>
        /// Masking certain properties with 5 asterisks
        /// </summary>
        /// <param name="policy"></param>
        /// <param name="propertyNames">Property names to be masked</param>
        /// <returns></returns>
        public static CustomPolicyOptions Masking(this CustomPolicyOptions policy, string[] propertyNames) =>
            policy.Masking("*****", propertyNames);

        /// <summary>
        /// Exclude certain property names
        /// </summary>
        /// <param name="policy"></param>
        /// <param name="propertyNames">Property names to be excluded</param>
        /// <returns></returns>
        public static CustomPolicyOptions Excluding(this CustomPolicyOptions policy, params string[] propertyNames)
        {
            if (propertyNames.Length == 0)
                throw new ArgumentException("Please specify at least 1 property to exclude", nameof(propertyNames));
            return policy.AddPolicy("excluding", isExcluded: p => propertyNames.Contains(p.Name));
        }

        /// <summary>
        /// Hide generated property for record type
        /// </summary>
        /// <param name="policy"></param>
        /// <returns></returns>
        public static CustomPolicyOptions ByProperRecordProcessing(this CustomPolicyOptions policy) =>
            policy.AddPolicy("record processing", isExcluded: p => p.Name == "EqualityContract");

        /// <summary>
        /// Ignore static property
        /// </summary>
        /// <param name="policy"></param>
        /// <returns></returns>
        public static CustomPolicyOptions IgnoreStatic(this CustomPolicyOptions policy) =>
            policy.AddPolicy("ignore static", isExcluded: p => p.GetMethod.IsStatic);

        /// <summary>
        /// Ignore compiler generated property
        /// </summary>
        /// <param name="policy"></param>
        /// <returns></returns>
        public static CustomPolicyOptions IgnoreGeneratedByCompiler(this CustomPolicyOptions policy) =>
            policy.AddPolicy("ignore generated by compiler",
                isExcluded: p => p.CustomAttributes.Any(a => a.AttributeType == typeof(CompilerGeneratedAttribute)));
    }
}